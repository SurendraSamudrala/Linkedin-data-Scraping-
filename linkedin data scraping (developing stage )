import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import os
import time

# Your LinkedIn Credentials
USERNAME = "surendrasamudrala939@gmail.com"
PASSWORD = "surendra@234A"

# Start Undetected Chrome
driver = uc.Chrome()
driver.get("https://www.linkedin.com/login")
time.sleep(5)  # Increased initial wait

# Automatic Login
try:
    email_field = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "username")))
    email_field.send_keys(USERNAME)
    password_field = driver.find_element(By.ID, "password")
    password_field.send_keys(PASSWORD)
    password_field.submit()
    print("✅ Logged in successfully!")
    time.sleep(10)  # Increased wait for redirect
except Exception as e:
    print(f"❌ Login failed: {e}")
    print("Current URL:", driver.current_url)
    print("Page title:", driver.title)
    driver.quit()
    exit()

# Open My Connections Page
driver.get("https://www.linkedin.com/mynetwork/invite-connect/connections/")
print("Navigating to connections page...")
print("Current URL:", driver.current_url)
print("Page title:", driver.title)
time.sleep(10)  # Increased wait for page load

# Wait for Connections to Load
try:
    wait = WebDriverWait(driver, 120)
    wait.until(EC.presence_of_all_elements_located((By.XPATH, "//a[contains(@href, '/in/')]")))
    print("✅ Connections page loaded with profile links!")
except Exception as e:
    print(f"❌ Failed to load connections page: {e}")
    print("Page source preview:", driver.page_source[:500])
    driver.quit()
    exit()

# Store Data as a List
connections = []

# Scroll & Load All Connections
max_attempts = 100
attempt = 0
last_height = 0
seen_links = set()

while attempt < max_attempts:
    try:
        # Broader XPath to find any element with a profile link
        connection_cards = driver.find_elements(By.XPATH, "//*[descendant::a[contains(@href, '/in/')]]")
        print(f"Attempt {attempt + 1}: Found {len(connection_cards)} connection elements")

        for card in connection_cards:
            try:
                # Extract Profile Link and Name
                link_element = card.find_element(By.XPATH, ".//a[contains(@href, '/in/')]")
                profile_link = link_element.get_attribute("href")
                if "/in/" not in profile_link:
                    continue

                # Extract Profile Name with multiple fallbacks
                profile_name = link_element.text.strip()
                if not profile_name:
                    try:
                        name_element = card.find_element(By.XPATH, ".//span[contains(@class, 'name') or contains(@class, 'visually-hidden') or contains(@class, 't-16') or contains(@class, 'entity-result')]")
                        profile_name = name_element.text.strip()
                    except:
                        profile_name = "Unknown"

                print(f" - Profile Name: {profile_name}")
                print(f" - Profile Link: {profile_link}")

                # Add to List
                connections.append((profile_name, profile_link))
                seen_links.add(profile_link)

            except Exception as e:
                print(f"⚠️ Skipping connection card due to error: {e}")

        # Scroll Down
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        print("Scrolled to bottom of page")
        time.sleep(15)  # Increased wait time

        # Check Page Height
        new_height = driver.execute_script("return document.body.scrollHeight")
        print(f"Page height: {new_height}")

        # Stop if no new content
        if new_height == last_height:
            print(f"✅ No more new content loaded! Total collected: {len(connections)}, Unique: {len(seen_links)}")
            break
        last_height = new_height

        attempt += 1

    except Exception as e:
        print(f"⚠️ Error loading connections: {e}")
        break

# Remove Duplicates Based on Profile Link
unique_connections = []
seen_urls = set()
for name, link in connections:
    if link not in seen_urls:
        unique_connections.append((name, link))
        seen_urls.add(link)

# Debugging: Print Collected Data
print(f"Total connections collected: {len(connections)}")
print(f"Unique connections: {len(unique_connections)}")
if unique_connections:
    print("Collected data (first 10):")
    for name, link in unique_connections[:10]:
        print(f" - {name}: {link}")
else:
    print("❌ No data collected!")

# Save to CSV
try:
    file_path = os.path.join(os.path.expanduser("~"), "Desktop", "LinkedIn_Connections.csv")
    df = pd.DataFrame(unique_connections, columns=["Profile Name", "Profile Link"])
    print(f"DataFrame created with {len(df)} rows")
    df.to_csv(file_path, index=False, encoding='utf-8')
    print(f"✅ Data saved to {file_path} successfully!")
except Exception as e:
    print(f"❌ Error saving CSV file: {e}")

# Close Browser
driver.quit()
