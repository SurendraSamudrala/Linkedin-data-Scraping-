import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import os
import time
import random

# Your LinkedIn Credentials
USERNAME = "surendrasamudrala939@gmail.com"
PASSWORD = "surendra@234A"

# Start Undetected Chrome
driver = uc.Chrome()
driver.get("https://www.linkedin.com/login")
time.sleep(5)  # Initial wait for the page to load

# Automatic Login
try:
    email_field = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "username"))
    )
    email_field.send_keys(USERNAME)
    password_field = driver.find_element(By.ID, "password")
    password_field.send_keys(PASSWORD)
    password_field.submit()
    print("✅ Logged in successfully!")
    time.sleep(10)  # Wait for redirect after login
except Exception as e:
    print(f"❌ Login failed: {e}")
    driver.quit()
    exit()

# Navigate to My Connections Page
driver.get("https://www.linkedin.com/mynetwork/invite-connect/connections/")
time.sleep(10)  # Wait for page load

# Store Data as a List
connections = set()  # Using a set to avoid duplicates
max_scrolls = 100
scroll_attempts = 0
last_height = 0

while scroll_attempts < max_scrolls:
    try:
        # Find all connection profile links
        profile_links = driver.find_elements(By.XPATH, "//a[contains(@href, '/in/')]")

        for link in profile_links:
            profile_url = link.get_attribute("href")
            profile_name = link.text.strip() or "Unknown"


            if profile_url not in connections:
                connections.add((profile_name, profile_url))
                print(f" - Collected: {profile_name} | {profile_url}")

        # Scroll down
        driver.execute_script("window.scrollBy(0, 1200);")
        time.sleep(random.uniform(5, 10))  # Small random delay

        # Check if new content is loaded
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            print(f"✅ No more new content loaded! Total collected: {len(connections)}")
            break
        last_height = new_height

        scroll_attempts += 1
        connection_count = len(connections)
        connection=set()

    except Exception as e:
        print(f"⚠️ Error while scrolling: {e}")
        break

# Save data to CSV
file_path = os.path.join(os.path.expanduser("~"), "Desktop", "LinkedIn_Connections.csv")
df = pd.DataFrame(list(connections), columns=["Profile Name", "Profile Link"])
df.to_csv(file_path, index=False, encoding='utf-8')
print(f"✅ Data saved to {file_path} successfully!")

# Close Browser
driver.quit()
