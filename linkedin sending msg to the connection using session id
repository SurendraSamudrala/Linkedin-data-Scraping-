import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import random

# LinkedIn session cookie (replace with your actual session ID)
session_ID = 'AQEDAUdRXeMBdvh5AAABlhk8IRcAAAGWPUilF00APnk9_xfaCjL9z6ee_40-LM4JCuvoKX2amYUYniM6C3msbuF-SivapHHwO6H5Valm8rKthTSqTRNkQb5iJm0e4vqEv5GBbB90oib0nPpDVSdjV245'

# Custom message to send
custom_message = "Hi there! Just reaching out to reconnect. Hope you're doing well!"

# Set up undetected Chrome
options = uc.ChromeOptions()
options.add_argument("--start-maximized")
driver = uc.Chrome(options=options)

# Login to LinkedIn using session cookie
driver.get("https://www.linkedin.com")
time.sleep(5)
driver.add_cookie({
    "name": "li_at",
    "value": session_ID,
    "domain": ".linkedin.com",
    "path": "/",
    "httpOnly": True
})
driver.get("https://www.linkedin.com/feed/")
time.sleep(5)
print("✅ Logged in!")

# Visit connections page
driver.get("https://www.linkedin.com/mynetwork/invite-connect/connections/")
time.sleep(10)

# Scroll and collect connections
container = driver.find_element(By.XPATH, "//*[@id='root']/div[1]/div[3]/div[2]/main")
connections = set()
scroll_attempt = 0

while scroll_attempt < 10:
    profiles = driver.find_elements(By.XPATH, "//a[contains(@href, '/in/')]")
    current_count = len(connections)

    for link in profiles:
        url = link.get_attribute("href")
        name = link.text.strip()
        if url and name:
            connections.add((name, url))

    driver.execute_script("arguments[0].scrollBy(0, 1000);", container)
    time.sleep(random.uniform(2.5, 4.5))

    if len(connections) == current_count:
        scroll_attempt += 1
    else:
        scroll_attempt = 0

print(f"✅ Total connections collected: {len(connections)}")
time.sleep(5)

# Function to send message by visiting profile
def send_message_to_profile(name, profile_url, message):
    try:
        driver.get(profile_url)
        time.sleep(random.uniform(4, 6))
        wait = WebDriverWait(driver, 10)

        # Try clicking Message button on the profile
        try:
            message_button = wait.until(EC.element_to_be_clickable((
                By.XPATH, "/html/body/div[6]/div[3]/div/div/div[2]/div/div/main/section[1]/div[2]/div[3]/div/div[1]/button"
            )))
            driver.execute_script("arguments[0].click();", message_button)
        except:
            print(f"⚠️ No message button found for {name} ({profile_url})")
            return

        time.sleep(2)

        # Find the message input box
        try:
            msg_box = wait.until(EC.presence_of_element_located((
                By.XPATH, "/html/body/div[6]/div[4]/div/aside[1]/div[2]/div[1]/div[2]/div/form/div[3]/div[1]/div/div[1]"
            ))) or wait.until(EC.presence_of_element_located((
                By.XPATH, "//*[@id='msg-form-ember307']/div[3]/div[1]/div/div[1]")))
            msg_box.click()
            msg_box.send_keys(message)
        except:
            print(f"⚠️ Couldn't find message box for {name}")
            return

        # Click Send
        try:
            send_btn = wait.until(EC.element_to_be_clickable((
                By.XPATH, "/html/body/div[6]/div[4]/div/aside[1]/div[2]/div[1]/div[2]/div/form/footer/div[2]/div[1]/button"
            )))
            send_btn.click()
            print(f"📨 Message sent to {name}")
        except:
            print(f"⚠️ Send button not found for {name}")

        try:
            close_btn = wait.until(EC.element_to_be_clickable((
                By.XPATH, "//*[@id='ember303']"
            )))
            close_btn.click()
            print(f"🧹 Closed message window for {name}")
        except:
            print(f"⚠️ Could not close message window for {name}")

        time.sleep(3)

    except Exception as e:
        print(f"❌ Error messaging {name} at {profile_url}: {e}")
        time.sleep(2)

# Send messages to all collected connections
for name, url in connections:
    send_message_to_profile(name, url, custom_message)

# Done
driver.quit()
print("✅ All done!")
