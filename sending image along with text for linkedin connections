import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import random
import os
from openpyxl import load_workbook

session_ID = 'AQEDAUdRXeMBPWBYAAABliOELTMAAAGWR5CxM1YAq54HQ4ynVoh9KiNKYnjvvfJLM4S3SDjPzkOrD3c0A6ItEaW7f_Udz4l4KT8AW5TTvXfKjT1JQ6cPtH26IKP4M_yb8Xz3lf4Mj-nYsAIUZbpbeG7K'  # Replace with your LinkedIn session cookie

# Load message template
message_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "message.xlsx")
wb = load_workbook(message_file_path)
ws = wb.active
custom_template = str(ws["A1"].value).strip()
print("‚úÖ Loaded message template:", custom_template)

# Load LinkedIn profiles
excel_path = os.path.join(os.path.expanduser("~"), "Desktop", "LinkedIn_Connections.xlsx")
df = pd.read_excel(excel_path)
connections = [(row['Profile Name'], row['Profile Link']) for index, row in df.iterrows()]

# Set image path
image_path = os.path.join(os.path.expanduser("~"), "Desktop", "image.png")
if not os.path.exists(image_path):
    print(f"‚ö†Ô∏è Image not found at: {image_path}")
else:
    print("üìé Image to send found:", image_path)

# ====== START BROWSER ======
options = uc.ChromeOptions()
options.add_argument("--start-maximized")
driver = uc.Chrome(options=options)

# Login using session cookie
driver.get("https://www.linkedin.com")
time.sleep(5)
driver.add_cookie({
    "name": "li_at",
    "value": session_ID,
    "domain": ".linkedin.com",
    "path": "/",
    "httpOnly": True
})
driver.get("https://www.linkedin.com/feed/")
time.sleep(5)
print("‚úÖ Logged in!")

# ====== MESSAGE FUNCTION ======
def send_message_to_profile(name, profile_url, message, image_path=None):
    try:
        driver.get(profile_url)
        time.sleep(random.uniform(4, 6))
        wait = WebDriverWait(driver, 10)

        try:
            message_button = wait.until(EC.element_to_be_clickable((
                By.XPATH, "/html/body/div[6]/div[3]/div/div/div[2]/div/div/main/section[1]/div[2]/div[3]/div/div[1]/button"
            )))
            driver.execute_script("arguments[0].click();", message_button)
        except:
            print(f"‚ùå No message button found for {name} ({profile_url})")
            return

        time.sleep(2)

        try:
            msg_box = wait.until(EC.presence_of_element_located((
                By.XPATH, "/html/body/div[6]/div[4]/div/aside[1]/div[2]/div[1]/div[2]/div/form/div[3]/div[1]/div/div[1]"
            )))
            msg_box.click()
            msg_box.send_keys(message)
        except:
            print(f"‚ùå Couldn't find message box for {name}")
            return

        # Attach image if path is provided
        if image_path and os.path.exists(image_path):
            try:
                attach_button = wait.until(EC.element_to_be_clickable((
                    By.XPATH, "/html/body/div[6]/div[4]/div/aside[1]/div[2]/div[1]/div[2]/div/form/footer/div[1]/div[2]/button"
                )))
                attach_button.click()
                time.sleep(10)

                file_input = driver.find_element(By.XPATH, "//input[@type='file']")
                file_input.send_keys(image_path)
                print(f"üìé Image attached for {name}")
                time.sleep(3)  # Allow time for upload
            except Exception as e:
                print(f"‚ùå Couldn't attach image for {name}: {e}")

        # Send the message
        try:
            send_button = wait.until(EC.element_to_be_clickable((
                By.XPATH, "/html/body/div[6]/div[4]/div/aside[1]/div[2]/div[1]/div[2]/div/form/footer/div[2]/div[1]/button"
            )))
            send_button.click()
            print(f"‚úÖ Message sent to {name}")
        except:
            print(f"‚ùå Send button not found for {name}")

        time.sleep(random.uniform(2, 3))

    except Exception as e:
        print(f"‚ùå Error messaging {name} at {profile_url}: {e}")
        time.sleep(3)

# ====== MAIN LOOP ======
for name, url in connections:
    personalized_message = custom_template.replace("{name}", name)
    send_message_to_profile(name, url, personalized_message, image_path)

# ====== DONE ======
driver.quit()
print("‚úÖ All done!")
